import { type Inputs } from './inputs'

export class Prompts {
  summarize: string
  summarizeReleaseNotes: string

  summarizeFileDiff = `## GitHub PR Title

\`$title\` 

## Description

\`\`\`
$description
\`\`\`

## Diff

\`\`\`diff
$file_diff
\`\`\`

## Instructions

差分を100ワード以内で簡潔に要約してください。
要約には、エクスポートされた関数、グローバルデータ構造および変数のシグネチャの変更、
コードの外部インターフェイスや動作に影響を与える可能性のある変更に該当する部分に
注釈を含める必要があります。
`
  triageFileDiff = `概要の下で、差分を\`NEEDS_REVIEW\`または\`NEEDS_REVIEW\`としてトリアージしてください。
その判断は下記の基準に基づきます。
  
  - 差分にロジックまたは機能への変更が含まれる場合、たとえそれらが軽微な変更であっても
    \`NEEDS_REVIEW\`としてトリアージします。これには、制御構造の変更や関数呼び出し、
    変数の割り当てなど、コードの動作に影響を与える可能性のある変更が含まれます。
  - diff に、コードロジックに影響を与えない非常に小さな変更のみが含まれている場合。
    タイプミスを修正したり、フォーマットを変更したり、わかりやすくするために変数の名前を変更したりした場合は、
    \`APPROVED\`としてトリアージします。
  
diffを十分に評価し、変更された行数、システム全体への潜在的な影響、新たなバグやセキュリティ脆弱性の
混入の可能性などの要素を考慮してください。
疑わしい場合は、常に慎重を期し、差分を\`NEEDS_REVIEW\`としてトリアージしてください。

この作業によるdiffのトリアージの出力形式は、次に示す書式に厳密に従う必要があります。
[TRIAGE]: <NEEDS_REVIEW or APPROVED>
  
重要：
  - あなたの要約では、ファイルの徹底的なレビューや潜在的な問題への注意が必要であることについては言及しないでください。
  - 差分を\`NEEDS_REVIEW\`または\`APPROVED\`としてトリアージした理由を説明しないでください。
  - これらの変更がコードのロジックや機能に影響することは、サマリーには書かないでください。
    上記のトリアージステータスの書式は、そのことを示すためだけに使用してください。
`
  summarizeChangesets = `このプル リクエストの変更セットを以下に示します。
変更セットは時系列順に並べられ、新しい変更セットはリストの最後に追加されます。
形式は、ファイル名とそれらのファイルの変更の概要で構成されます。
各変更セットの間には区切り文字があります。
あなたのタスクは、関連する/類似した変更を含むファイルを重複排除し、
単一の変更セットにグループ化することです。
入力と同じ形式を使用して、更新された変更セットで応答してください。

$raw_summary
`

  summarizePrefix = `Here is the summary of changes you have generated for files:
      \`\`\`
      $raw_summary
      \`\`\`

`

  summarizeShort = `あなたの仕事は、変更の簡潔な概要を提供することです。
この概要は各ファイルを確認する際のプロンプトとして使用され、AI ボットが理解できるように明確にする必要があります。

Instructions:

- PRの変更点の要約のみに重点を置き、あくまで事実にこだわります。
- レビューの実行方法についてボットに指示を与えないでください。
- ファイルには徹底的なレビューが必要であることや、潜在的な問題についての注意が必要であることには言及しないでください。
- これらの変更がコードのロジックや機能に影響を与えることには言及しないでください。
- 要約は500語を超えないようにします。
`

  reviewFileDiff = `## GitHub PR Title

\`$title\` 

## Description

\`\`\`
$description
\`\`\`

## Summary of changes

\`\`\`
$short_summary
\`\`\`

## IMPORTANT Instructions

Input: 行番号が付いた新規追加されたコードの断片（hunks）と古いコード（置き換えられたコード）。hunksは部分的なコード断片を表します。
Additional Context: PRのタイトル、説明、要約、およびコメントチェーン。
Task: 提供されたコンテキストを使用して新規hunksの重要な問題をレビューし、必要に応じてコメントで応じてください。
Output: 新規hunksの正確な行番号範囲を参照した Markdown形式のレビューコメントを提供します。単一行のコメントの場合は、開始行番号=終了行番号を使用します。コメントは同じhunk内にある必要があります。適切な言語識別子を使用してフェンスコードブロックを使用してください。コードを正しくフォーマットし、インデントを合わせてください。「suggestion」コードブロックの使用は避けてください。提案された変更については、"+"または"-"を使用して変更を示す「diff」コードブロックを使用してください。修正スニペットを含むコメントの行番号範囲は、新しいhunk内で置き換える範囲と正確に一致している必要があります。

- 一般的なフィードバック、要約、変更の説明、または良い追加を行ったことに対する賛辞を提供しないでください。
- 提供されたコンテキストに基づいて特定の、客観的な洞察にのみ焦点を当て、システム全体への潜在的な影響についての広範なコメントや変更の意図に関する質問を避けてください。

特定の行範囲に問題が見つからない場合は、その行範囲に対して\`LGTM!\`というテキストでレビューセクションに応答する必要があります。

パフォーマンス、セキュリティ、デザインパターンの遵守に焦点を当てた変更が必要または有益である理由に関するコメント。

曖昧さや不確実性がある場合は、それらの領域をさらなる人間のレビューのためにフラグを立て、そのようにする理由について簡潔に説明してください。

フィードバックは建設的であるべきです。すべてのコメントと提案には明確な説明を提供し、プロジェクトの全体的な標準と目標に沿ってコードを改善するのに役立つように焦点を当ててください。

## Example

### Example changes

---new_hunk---
\`\`\`
  z = x / y
    return z

20: def add(x, y):
21:     z = x + y
22:     retrn z
23: 
24: def multiply(x, y):
25:     return x * y

def subtract(x, y):
  z = x - y
\`\`\`
  
---old_hunk---
\`\`\`
  z = x / y
    return z

def add(x, y):
    return x + y

def subtract(x, y):
    z = x - y
\`\`\`

---comment_chains---
\`\`\`
変更を確認してください。
\`\`\`

---end_change_section---

### Example response

22-22:
構文エラーがあります。
\`\`\`diff
-    retrn z
+    return z
\`\`\`
---
24-25:
LGTM!
---

## Changes made to \`$filename\` for your review

$patches
`

  comment = `ファイル \`$filename\` に、Github PR レビューのコメントがつけられました。
そのコメントの指示に従ってください。

## GitHub PR Title

\`$title\`

## Description

\`\`\`
$description
\`\`\`

## Summary generated by the AI bot

\`\`\`
$short_summary
\`\`\`

## Entire diff

\`\`\`diff
$file_diff
\`\`\`

## Diff being commented on

\`\`\`diff
$diff
\`\`\`

## Instructions

(返信を提案するのではなく) 新しいコメントに直接返信してください。返信はそのまま掲載されます。

コメント内に指示・要望が含まれる場合は遵守してください。
たとえば、コメントがコードに関するドキュメント コメントを生成するように求めている場合は、返信で必要なコードを生成してください。

返信では、ユーザーを\`@user\`でタグ付けして返信を開始してください。

## Comment format

\`user: comment\`

## Comment chain (including the new comment)

\`\`\`
$comment_chain
\`\`\`

## The comment/request that you need to directly reply to

\`\`\`
$comment
\`\`\`
`

  constructor(summarize = '', summarizeReleaseNotes = '') {
    this.summarize = summarize
    this.summarizeReleaseNotes = summarizeReleaseNotes
  }

  renderSummarizeFileDiff(
    inputs: Inputs,
    reviewSimpleChanges: boolean
  ): string {
    let prompt = this.summarizeFileDiff
    if (reviewSimpleChanges === false) {
      prompt += this.triageFileDiff
    }
    return inputs.render(prompt)
  }

  renderSummarizeChangesets(inputs: Inputs): string {
    return inputs.render(this.summarizeChangesets)
  }

  renderSummarize(inputs: Inputs): string {
    const prompt = this.summarizePrefix + this.summarize
    return inputs.render(prompt)
  }

  renderSummarizeShort(inputs: Inputs): string {
    const prompt = this.summarizePrefix + this.summarizeShort
    return inputs.render(prompt)
  }

  renderSummarizeReleaseNotes(inputs: Inputs): string {
    const prompt = this.summarizePrefix + this.summarizeReleaseNotes
    return inputs.render(prompt)
  }

  renderComment(inputs: Inputs): string {
    return inputs.render(this.comment)
  }

  renderReviewFileDiff(inputs: Inputs): string {
    return inputs.render(this.reviewFileDiff)
  }
}
